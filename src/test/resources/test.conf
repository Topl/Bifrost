bifrost {

  application {
    # application version of this software
    version { value = 1.1.3 }

    # directory where all network data is stored
    dataDir = "/tmp/bifrost/test/data"

    # directory where the keyfiles used for forging are stored
    keyFileDir = "/tmp/bifrost/test/keyfiles"

    # enables the Program Box Registry, this is needed to process program transactions
    enablePBR = true

    # enables the Token Box Registry, this is needed to process transfer transactions
    enableTBR = true

    # optional set of accounts that will be tracked by the state of this node
    nodeKeys = []

    # ----- Cache settings (Guava) -----
    # Consider 5 sec per block for testing and 15 sec per block for toplnet
    # 15 sec * 50 blocks / 60 sec per minutes = 12.5 minutes
    # using milliseconds: 1,200,000 milliseconds == 20 minutes
    cacheExpire = 1200000
    cacheSize = 50000
  }

  restApi {
    # Local network address to bind to
    bindAddress = "0.0.0.0:9085"

    # Hash of the API key string
    apiKeyHash = "6ju8SfmsrZbjCRJ8FXH8Bgygb7L3sNo3jCfcsYeDSrC2"

    # Enable cors support
    corsAllowed = true

    # Time allowed to process a request
    timeout = 10s

    verboseAPI = true
  }


  network {

    #####################################################
    # Node information to be declared during handshake  #
    #####################################################

    # Node name to send during handshake
    nodeName = "Bifrost"

    # Network version send in handshake
    appVersion = 1.0.0

    # Network agent name. May contain information about client code
    # stack, starting from core code-base up to the end graphical interface.
    # Basic format is `/Name:Version(comments)/Name:Version/.../`,
    # e.g. `/Topl-Scala-client:1.0.0(Windows; U; CPU OS 3_2_1)/`
    agentName = "bifrost-client"

    # Limit the size of allowed agent names
    applicationNameLimit = 50

    # Network address
    bindAddress = "0.0.0.0:9084"

    ########################
    # Connection settings  #
    ########################

    # Magic bytes, that will be added to every p2p message to allow
    # distinguish different networks (e.g. testnet/mainnet).
    magicBytes = [12, 34, 56, 78]

    # String with IP address and port to send as external address during handshake.
    # Could be set automatically if UPnP is enabled.
    #
    # If `declared-address` is set, which is the common scenario for nodes running in the cloud,
    # the node will just listen to incoming connections on `bindAddress:port` and
    # broadcast its `declaredAddress` to its peers.
    # UPnP is supposed to be disabled in this scenario.
    #
    # If declared address is not set and UPnP is not enabled, the node will not be reachable from
    # external networks (outside your LAN)
    #
    # If declared address is not set and UPnP is enabled, the node will attempt to connect to an IGD, retrieve its
    # external IP address and configure the gateway to allow traffic through. If the node succeeds, the gateway devices external
    # IP address becomes the node's declared address.
    #
    # In some cases, you may both set `declaredAddress` and enable UPnP (e.g. when IGD can't reliably determine its
    # external IP address). In such cases the node will attempt to configure an IGD to pass traffic from external port
    # to `bind-address:port`. Please note, however, that this setup is not recommended.
    # declaredAddress = ""

    # Enable UPnP tunnel creation only if you router/gateway supports it. Useful if your node is running in home
    # network. Completely useless if you node is in cloud.
    upnpEnabled = false

    # When UPnP is enabled, should a random port be mapped?
    upnpUseRandom = true

    # Accept only local connections
    localOnly = false

    # UPnP timeouts
    # upnp-gateway-timeout = 7s
    # upnp-discover-timeout = 3s

    # Add delay for sending message
    # addedMaxDelay = 2000ms

    ##################
    # Peers settings #
    ##################

    # Network handshake timeout
    handshakeTimeout = 5000ms

    # List of IP addresses of well known nodes.
    knownPeers = []

    # Interval between GetPeers messages to be send by our node to a random one
    getPeersInterval = 2m

    # Number of network connections
    maxConnections = 20

    # Network connection timeout
    connectionTimeout = 1s

    ############################
    # Delivery settings limits #
    ############################

    # Network delivery timeout
    deliveryTimeout = 10s

    # Max number of delivery checks. Stop expecting modifier (and penalize peer) if it was not delivered on time
    maxDeliveryChecks = 40

    ############
    # Timeouts #
    ############

    # Interval between `SyncInfo` messages when our node is not synchronized yet
    syncInterval = 10s

    # Interval between `SyncInfo` messages when our node is already synchronized
    syncIntervalStable = 20s

    # Synchronization timeout
    syncTimeout = 5s

    # Synchronization status update interval
    syncStatusRefresh = 2m

    # Synchronization status update interval for stable regime
    syncStatusRefreshStable = 4m

    # Network controller timeout
    controllerTimeout = 5s

    ###############
    # Size limits #
    ###############

    # Maximum income package size
    maxPacketSize = 1048576

    # Maximum size of a handshaking message
    maxHandshakeSize = 8096

    # Accept maximum inv objects
    maxInvObjects = 512

    # Desired number of inv objects. Our requests will have this size.
    desiredInvObjects = 512

    # How many persistent modifiers to store in the cache.
    # The cache stores modifiers that are waiting to be applied.
    maxModifiersCacheSize = 1024

    # How deep below the height of the chain should we consider forks?
    maxChainCacheDepth = 1024

    # Maximum number of PeerSpec objects in one Peers message
    maxPeerSpecObjects = 64

    # Default ban duration, unless permanent penalty is applied
    temporalBanDuration = 60m

    # Misbehaving peer penalty score will not be increased withing this time interval,
    # unless permanent penalty is applied
    penaltySafeInterval = 5m

    # Max penalty score peer can accumulate before being banned
    penaltyScoreThreshold = 100
  }

  forging {

    # settings required for private networks
    privateTestnet {

      # the number of accounts to create
      numTestnetAccts = 10

      # the Arbit and Poly balance of each account
      testnetBalance = 1000000

      # Difficulty the genesis block is created with
      initialDifficulty = 1000000000000000000
    }

    protocolVersions = [
      # monon settings
      {
        # maximum applicable software version for these protocol settings
        version { value = 0.0.1 }
        # maximum applicable block height for these protocol settings
        startBlock = 0
        # applicable block serializer version
        blockVersion = 0
        # Agreed upon block time target
        targetBlockTime = 3 seconds
        # number of transactions per block
        numTxPerBlock = 100
      }
    ]

    # number of attempts to forge per block time
    blockGenerationDelay = 1 second

    # Agreed upon block time target
    targetBlockTime = 3000

    # number of transactions per block
    numTxPerBlock = 100
  }

  ntp {
    # NTP server address
    server = "pool.ntp.org"

    # update time rate
    updateEvery = 30m

    # server answer timeout
    timeout = 30s
  }
}

akka {
  jvm-shutdown-hooks = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = on
  actor {
    provider = remote
    debug {
      receive = on
      autoreceive = on
      unhandled = on
      lifecycle = on
      event-stream = on
    }
  }
  remote.artery.enabled = false
  remote.classic {
     enabled-transports = ["akka.remote.classic.netty.tcp"]
     netty.tcp {
        hostname = "127.0.0.1"
        port = 2550
     }
  }
}

# Service to monitor performance
kamon {

  # Enable/disable monitoring
  enable = false

  environment.service = "bifrost"
  # apm.api-key = ""

  trace.join-remote-parents-with-same-span-id = yes
  metric.tick-interval = 60 seconds

  influxdb {
    hostname = "localhost"
    port = 8086
    database = "mydb"
    subscriptions {
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
    }
  }

  zipkin {
    hostname = "localhost"
    port = 9411
    protocol = "http"
  }

  instrumentation {
    akka.filters {
      doomsday-wildcard = on
      actors {
        track {
          includes = ["**"]
          excludes = []
        }
        start-trace {
          includes = ["**"]
        }
        trace {
          includes = ["**"]
        }
      }
      dispatchers {
        includes = ["**"]
      }
    }

    akka.http {
      server {
        propagation {
          enabled = yes
          channel = default
        }
        tracing {
          enabled = yes
          span-metrics = on
        }
      }
      client {
        propagation {
          enabled = yes
          channel = default
        }
        tracing {
          enabled = yes
          span-metrics = on
        }
      }
    }
  }
}
