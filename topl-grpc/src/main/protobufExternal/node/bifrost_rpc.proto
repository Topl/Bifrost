syntax = "proto3";

package co.topl.proto.services;

import 'models/common.proto';
import 'models/block.proto';
import 'models/transaction.proto';

service NodeRpc {
  // Submit a proven Transaction to the node
  rpc BroadcastTransaction (BroadcastTransactionReq) returns (BroadcastTransactionRes);
  // Read the contents of the node's mempool
  rpc CurrentMempool (CurrentMempoolReq) returns (CurrentMempoolRes);

  // retrieve a Block Header by its ID
  rpc FetchBlockHeader (FetchBlockHeaderReq) returns (FetchBlockHeaderRes);

  // retrieve a Block Body by its ID
  rpc FetchBlockBody (FetchBlockBodyReq) returns (FetchBlockBodyRes);

  // retrieve a Transaction by its ID
  rpc FetchTransaction (FetchTransactionReq) returns (FetchTransactionRes);


  // retrieve the Block ID associated with a height, according to the node's canonical chain
  rpc FetchBlockIdAtHeight (FetchBlockIdAtHeightReq) returns (FetchBlockIdAtHeightRes);

  // retrieve the Block ID associated with a depth, according to the node's canonical chain
  rpc FetchBlockIdAtDepth (FetchBlockIdAtDepthReq) returns (FetchBlockIdAtDepthRes);

}

// Request type for BroadcastTransaction
message BroadcastTransactionReq {
  // A "proven" Transaction that is meant to be included in the blockchain
  co.topl.proto.models.Transaction transaction = 1;
}

// Response type for BroadcastTransaction
message BroadcastTransactionRes {}

// Request type for CurrentMempool
message CurrentMempoolReq {}

// Response type for CurrentMempool
message CurrentMempoolRes {
  // A list of Transaction IDs that are currently in the node's mempool
  repeated co.topl.proto.models.TransactionId transactionIds = 1;
}

// Request type for FetchBlockHeader
message FetchBlockHeaderReq {
  // The ID of the block to retrieve
  co.topl.proto.models.BlockId blockId = 1;
}

// Response type for FetchBlockHeader
message FetchBlockHeaderRes {
  // The Block Header associated with the requested ID.  None/null if not found.
  optional co.topl.proto.models.BlockHeader header = 1;
}

// Request type for FetchBlockBody
message FetchBlockBodyReq {
  // The ID of the block to retrieve
  co.topl.proto.models.BlockId blockId = 1;
}

// Response type for FetchBlockBody
message FetchBlockBodyRes {
  // The Block Body associated with the requested ID.  None/null if not found.
  optional co.topl.proto.models.BlockBody body = 1;
}

// Request type for FetchTransaction
message FetchTransactionReq {
  co.topl.proto.models.TransactionId transactionId = 1;
}

// Response type for FetchTransaction
message FetchTransactionRes {
  // The Transaction associated with the requested ID.  None/null if not found.
  optional co.topl.proto.models.Transaction transaction = 1;
}

// Request type for FetchBlockIdAtHeight
message FetchBlockIdAtHeightReq {
  // The height of interest
  uint64 height = 1;
}

// Response type for FetchBlockIdAtHeight
message FetchBlockIdAtHeightRes {
  // The Block ID associated with the requested height.  None/null if not found.
  optional co.topl.proto.models.BlockId blockId = 1;
}

// Request type for FetchBlockIdAtDepth
message FetchBlockIdAtDepthReq {
  // The depth of interest.  When depth=0, the canonical head is retrieved.
  uint64 depth = 1;
}

// Response type for FetchBlockIdAtDepth
message FetchBlockIdAtDepthRes {
  // The Block ID associated with the requested depth.  None/null if not found.
  optional co.topl.proto.models.BlockId blockId = 1;
}
