syntax = "proto3";

package co.topl.proto.models;

import 'models/address.proto';
import 'models/box.proto';
import 'models/proof.proto';
import 'models/proposition.proto';

// Represents the destruction and creation of Boxes
message Transaction {
  // The list of UTxOs to consume/destroy/spend
  repeated Input inputs = 1;
  // The list of new UTxOs to create
  repeated UnspentOutput outputs = 2;
  // Constrains when this Transaction can be included in the blockchain
  Schedule schedule = 3;
  // An optional array of bytes.
  optional bytes data = 4;

  // References a box to spend, plus the proof that is authorized to spend it
  message Input {
    // The previous box (reference) to spend
    Box.Id boxId = 1;
    // The Proposition which unlocks the Box.  Must result in the "spendingAddress" stamped on the referenced UTxO
    Proposition proposition = 2;
    // A Proof which satisfies the Proposition of the Box.
    Proof proof = 3;
    // The value inside the box being spent
    BoxValue value = 4;
  }
  // A new Box
  message UnspentOutput {
    // The address associated with the Box, including a commitment to a Proposition that unlocks this new Box
    FullAddress address = 1;
    // The value of the new Box
    BoxValue value = 2;
    optional bytes metadata = 3;
  }

  // Represents constraints on when a Transaction can be included in the blockchain
  message Schedule {
    // A UNIX timestamp (ms) of the transaction's original creation.  User-defined with no impact on the protocol.  Must be positive.
    uint64 creation = 1;
    // The minimum slot number of the block containing this transaction
    uint64 minimumSlot = 2;
    // The maximum slot number of the block constaing this transaction.  Must be greater than `minimumSlot`.
    uint64 maximumSlot = 3;
  }
}
