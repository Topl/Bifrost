// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int graal_create_isolate(
    ffi.Pointer<graal_create_isolate_params_t1> params,
    ffi.Pointer<ffi.Pointer<graal_isolate_t1>> isolate,
    ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>> thread,
  ) {
    return _graal_create_isolate(
      params,
      isolate,
      thread,
    );
  }

  late final _graal_create_isolatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<graal_create_isolate_params_t1>,
                  ffi.Pointer<ffi.Pointer<graal_isolate_t1>>,
                  ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>>)>>(
      'graal_create_isolate');
  late final _graal_create_isolate = _graal_create_isolatePtr.asFunction<
      int Function(
          ffi.Pointer<graal_create_isolate_params_t1>,
          ffi.Pointer<ffi.Pointer<graal_isolate_t1>>,
          ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>>)>();

  int graal_attach_thread(
    ffi.Pointer<graal_isolate_t1> isolate,
    ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>> thread,
  ) {
    return _graal_attach_thread(
      isolate,
      thread,
    );
  }

  late final _graal_attach_threadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<graal_isolate_t1>,
                  ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>>)>>(
      'graal_attach_thread');
  late final _graal_attach_thread = _graal_attach_threadPtr.asFunction<
      int Function(ffi.Pointer<graal_isolate_t1>,
          ffi.Pointer<ffi.Pointer<graal_isolatethread_t1>>)>();

  ffi.Pointer<graal_isolatethread_t1> graal_get_current_thread(
    ffi.Pointer<graal_isolate_t1> isolate,
  ) {
    return _graal_get_current_thread(
      isolate,
    );
  }

  late final _graal_get_current_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<graal_isolatethread_t1> Function(
              ffi.Pointer<graal_isolate_t1>)>>('graal_get_current_thread');
  late final _graal_get_current_thread =
      _graal_get_current_threadPtr.asFunction<
          ffi.Pointer<graal_isolatethread_t1> Function(
              ffi.Pointer<graal_isolate_t1>)>();

  ffi.Pointer<graal_isolate_t1> graal_get_isolate(
    ffi.Pointer<graal_isolatethread_t1> thread,
  ) {
    return _graal_get_isolate(
      thread,
    );
  }

  late final _graal_get_isolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<graal_isolate_t1> Function(
              ffi.Pointer<graal_isolatethread_t1>)>>('graal_get_isolate');
  late final _graal_get_isolate = _graal_get_isolatePtr.asFunction<
      ffi.Pointer<graal_isolate_t1> Function(
          ffi.Pointer<graal_isolatethread_t1>)>();

  int graal_detach_thread(
    ffi.Pointer<graal_isolatethread_t1> thread,
  ) {
    return _graal_detach_thread(
      thread,
    );
  }

  late final _graal_detach_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t1>)>>('graal_detach_thread');
  late final _graal_detach_thread = _graal_detach_threadPtr
      .asFunction<int Function(ffi.Pointer<graal_isolatethread_t1>)>();

  int graal_tear_down_isolate(
    ffi.Pointer<graal_isolatethread_t1> isolateThread,
  ) {
    return _graal_tear_down_isolate(
      isolateThread,
    );
  }

  late final _graal_tear_down_isolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t1>)>>('graal_tear_down_isolate');
  late final _graal_tear_down_isolate = _graal_tear_down_isolatePtr
      .asFunction<int Function(ffi.Pointer<graal_isolatethread_t1>)>();

  int graal_detach_all_threads_and_tear_down_isolate(
    ffi.Pointer<graal_isolatethread_t1> isolateThread,
  ) {
    return _graal_detach_all_threads_and_tear_down_isolate(
      isolateThread,
    );
  }

  late final _graal_detach_all_threads_and_tear_down_isolatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<graal_isolatethread_t1>)>>(
      'graal_detach_all_threads_and_tear_down_isolate');
  late final _graal_detach_all_threads_and_tear_down_isolate =
      _graal_detach_all_threads_and_tear_down_isolatePtr
          .asFunction<int Function(ffi.Pointer<graal_isolatethread_t1>)>();

  int run_main(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _run_main(
      argc,
      argv,
    );
  }

  late final _run_mainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('run_main');
  late final _run_main = _run_mainPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

class graal_isolate_t extends ffi.Opaque {}

class graal_isolatethread_t extends ffi.Opaque {}

class graal_create_isolate_params_t extends ffi.Struct {
  @ffi.Int()
  external int version;

  @__graal_uword()
  external int reserved_address_space_size;

  external ffi.Pointer<ffi.Char> auxiliary_image_path;

  @__graal_uword()
  external int auxiliary_image_reserved_space_size;

  @ffi.Int()
  external int _reserved_1;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> _reserved_2;

  @ffi.Int()
  external int pkey;

  @ffi.Char()
  external int _reserved_3;

  @ffi.Char()
  external int _reserved_4;
}

typedef __graal_uword = ffi.UnsignedLong;
typedef graal_create_isolate_params_t1 = graal_create_isolate_params_t;
typedef graal_isolate_t1 = graal_isolate_t;
typedef graal_isolatethread_t1 = graal_isolatethread_t;

const int __graal_create_isolate_params_version = 4;

const int NO_PROTECTION_DOMAIN = 0;

const int NEW_PROTECTION_DOMAIN = -1;
