"use strict";(self.webpackChunkbifrost_documentation=self.webpackChunkbifrost_documentation||[]).push([[627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||s;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const s={id:"connect-to-testnet",title:"Connect To Testnet",tags:["testnet","staking","Getting started"]},a=void 0,i={unversionedId:"reference/Networks/connect-to-testnet",id:"reference/Networks/connect-to-testnet",title:"Connect To Testnet",description:"How to Connect",source:"@site/docs/reference/Networks/connect-to-the-testnet.md",sourceDirName:"reference/Networks",slug:"/reference/Networks/connect-to-testnet",permalink:"/Bifrost/docs/current/reference/Networks/connect-to-testnet",draft:!1,tags:[{label:"testnet",permalink:"/Bifrost/docs/current/tags/testnet"},{label:"staking",permalink:"/Bifrost/docs/current/tags/staking"},{label:"Getting started",permalink:"/Bifrost/docs/current/tags/getting-started"}],version:"current",frontMatter:{id:"connect-to-testnet",title:"Connect To Testnet",tags:["testnet","staking","Getting started"]},sidebar:"referenceSidebar",previous:{title:"Run with Helm/Kubernetes",permalink:"/Bifrost/docs/current/reference/Installing Your Node/install-k8s"},next:{title:"Private Network",permalink:"/Bifrost/docs/current/reference/Networks/private-network"}},c={},l=[{value:"How to Connect",id:"how-to-connect",level:2},{value:"How to Get Funds",id:"how-to-get-funds",level:2},{value:"Visualize Transactions",id:"visualize-transactions",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"how-to-connect"},"How to Connect"),(0,o.kt)("p",null,"In this example, we will be using Docker to run the node."),(0,o.kt)("p",null,"The way to connect to a testnet is by adding it as a known peer. To do this via CLI, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"--knownPeersUnresolvedDns testnet.topl.co:9085"),". You will also need to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--config")," which contains the genesis block information and other configuration requirements for the given testnet."),(0,o.kt)("p",null,"The testnet configs are hosted on GitHub ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Topl/Genesis_Testnets"},"https://github.com/Topl/Genesis_Testnets")," which can be automatically downloaded by Bifrost using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--config https://raw.githubusercontent.com/Topl/Genesis_Testnets/main/testnet1/config.yaml")," parameter."),(0,o.kt)("p",null,"A full example of connecting to the node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run -p 9085:9085 -p 9084:9084 toplprotocol/bifrost-node:2.0.0-alpha10 \\\n    --knownPeersUnresolvedDns testnet.topl.co:9085 \\\n    --config https://raw.githubusercontent.com/Topl/Genesis_Testnets/main/testnet1/config.yaml\n")),(0,o.kt)("h2",{id:"how-to-get-funds"},"How to Get Funds"),(0,o.kt)("p",null,"Funds can be retrieved via our Faucet. ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.topl.co/#/"},"https://faucet.topl.co/#/")),(0,o.kt)("p",null,"Detailed instructions coming soon!"),(0,o.kt)("h2",{id:"visualize-transactions"},"Visualize Transactions"),(0,o.kt)("p",null,"Transactions can be viewed on our block explorer. ",(0,o.kt)("a",{parentName:"p",href:"https://explore.topl.co/#/"},"https://explore.topl.co/#/")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Annulus",src:n(6541).Z,width:"1131",height:"122"})),(0,o.kt)("p",null,"Select the correct network from the dropdown in the top right corner and search using the search box."),(0,o.kt)("p",null,"Detailed instructions coming soon!"))}d.isMDXComponent=!0},6541:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/annulus-ffa3166bddfcd772a377886a6df972b2.png"}}]);