"use strict";(self.webpackChunkbifrost_documentation=self.webpackChunkbifrost_documentation||[]).push([[627],{3417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var o=n(5893),s=n(1151);const r={id:"connect-to-testnet",title:"Connect To Testnet",tags:["testnet","staking","Getting started"]},i=void 0,c={id:"reference/Networks/connect-to-testnet",title:"Connect To Testnet",description:"How to Connect",source:"@site/docs/reference/Networks/connect-to-the-testnet.md",sourceDirName:"reference/Networks",slug:"/reference/Networks/connect-to-testnet",permalink:"/Bifrost/docs/current/reference/Networks/connect-to-testnet",draft:!1,unlisted:!1,tags:[{label:"testnet",permalink:"/Bifrost/docs/current/tags/testnet"},{label:"staking",permalink:"/Bifrost/docs/current/tags/staking"},{label:"Getting started",permalink:"/Bifrost/docs/current/tags/getting-started"}],version:"current",frontMatter:{id:"connect-to-testnet",title:"Connect To Testnet",tags:["testnet","staking","Getting started"]},sidebar:"referenceSidebar",previous:{title:"Run with Helm/Kubernetes",permalink:"/Bifrost/docs/current/reference/Installing Your Node/install-k8s"},next:{title:"Private Network",permalink:"/Bifrost/docs/current/reference/Networks/private-network"}},a={},l=[{value:"How to Connect",id:"how-to-connect",level:2},{value:"How to Get Funds",id:"how-to-get-funds",level:2},{value:"Visualize Transactions",id:"visualize-transactions",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"how-to-connect",children:"How to Connect"}),"\n",(0,o.jsx)(t.p,{children:"In this example, we will be using Docker to run the node."}),"\n",(0,o.jsxs)(t.p,{children:["The way to connect to a testnet is by adding it as a known peer. To do this via CLI, you can use ",(0,o.jsx)(t.code,{children:"--knownPeers testnet.topl.co:9085"}),". You will also need to pass the ",(0,o.jsx)(t.code,{children:"--config"})," which contains the genesis block information and other configuration requirements for the given testnet."]}),"\n",(0,o.jsxs)(t.p,{children:["The testnet configs are hosted on GitHub ",(0,o.jsx)(t.a,{href:"https://github.com/Topl/Genesis_Testnets",children:"https://github.com/Topl/Genesis_Testnets"})," which can be automatically downloaded by Bifrost using the ",(0,o.jsx)(t.code,{children:"--config https://raw.githubusercontent.com/Topl/Genesis_Testnets/main/testnet2/config.yaml"})," parameter."]}),"\n",(0,o.jsx)(t.p,{children:"A full example of connecting to the node:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"docker run -p 9085:9085 -p 9084:9084 toplprotocol/bifrost-node:2.0.0-alpha10 \\\n    --knownPeers testnet.topl.co:9085 \\\n    --config https://raw.githubusercontent.com/Topl/Genesis_Testnets/main/testnet2/config.yaml\n"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-get-funds",children:"How to Get Funds"}),"\n",(0,o.jsxs)(t.p,{children:["Funds can be retrieved via our Faucet. ",(0,o.jsx)(t.a,{href:"https://faucet.topl.co/#/",children:"https://faucet.topl.co/#/"})]}),"\n",(0,o.jsx)(t.p,{children:"Detailed instructions coming soon!"}),"\n",(0,o.jsx)(t.h2,{id:"visualize-transactions",children:"Visualize Transactions"}),"\n",(0,o.jsxs)(t.p,{children:["Transactions can be viewed on our block explorer. ",(0,o.jsx)(t.a,{href:"https://explore.topl.co/#/",children:"https://explore.topl.co/#/"})]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Annulus",src:n(6541).Z+"",width:"1131",height:"122"})}),"\n",(0,o.jsx)(t.p,{children:"Select the correct network from the dropdown in the top right corner and search using the search box."}),"\n",(0,o.jsx)(t.p,{children:"Detailed instructions coming soon!"})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},6541:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/annulus-ffa3166bddfcd772a377886a6df972b2.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>i});var o=n(7294);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);