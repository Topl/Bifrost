"use strict";(self.webpackChunkbifrost_documentation=self.webpackChunkbifrost_documentation||[]).push([[574],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(k,s(s({ref:t},u),{},{components:n})):r.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={id:"install-k8s",title:"Run with Helm/Kubernetes",tags:["Install","Getting started","sdkman","scala","jar"]},s=void 0,o={unversionedId:"reference/Installing Your Node/install-k8s",id:"reference/Installing Your Node/install-k8s",title:"Run with Helm/Kubernetes",description:"Quickstart",source:"@site/docs/reference/Installing Your Node/helm-kubernetes.md",sourceDirName:"reference/Installing Your Node",slug:"/reference/Installing Your Node/install-k8s",permalink:"/Bifrost/docs/current/reference/Installing Your Node/install-k8s",draft:!1,tags:[{label:"Install",permalink:"/Bifrost/docs/current/tags/install"},{label:"Getting started",permalink:"/Bifrost/docs/current/tags/getting-started"},{label:"sdkman",permalink:"/Bifrost/docs/current/tags/sdkman"},{label:"scala",permalink:"/Bifrost/docs/current/tags/scala"},{label:"jar",permalink:"/Bifrost/docs/current/tags/jar"}],version:"current",frontMatter:{id:"install-k8s",title:"Run with Helm/Kubernetes",tags:["Install","Getting started","sdkman","scala","jar"]},sidebar:"referenceSidebar",previous:{title:"Run with Docker",permalink:"/Bifrost/docs/current/reference/Installing Your Node/install-docker"},next:{title:"Connect To Testnet",permalink:"/Bifrost/docs/current/reference/Networks/connect-to-testnet"}},i={},c=[{value:"Quickstart",id:"quickstart",level:2},{value:"Tools needed:",id:"tools-needed",level:3},{value:"Install K8s cluster",id:"install-k8s-cluster",level:2},{value:"Ubuntu",id:"ubuntu",level:3},{value:"Enable add ons",id:"enable-add-ons",level:4},{value:"Windows",id:"windows",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"quickstart"},"Quickstart"),(0,a.kt)("h3",{id:"tools-needed"},"Tools needed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Docker"),(0,a.kt)("li",{parentName:"ul"},"Kubernetes"),(0,a.kt)("li",{parentName:"ul"},"Helm")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"values.yaml","values.yaml":!0},"args: ['--dataDir', '/mnt/bifrost/data', '--stakingDir', '/mnt/bifrost/staking']\n\nvolume:\n  mountDirectory: /mnt/bifrost\n\nhelm repo add topl https://topl.github.io/helm-charts\nhelm repo update\nhelm upgrade --install bifrost topl/bifrost -n bifrost --create-namespace -f ./values.yaml\n")),(0,a.kt)("h2",{id:"install-k8s-cluster"},"Install K8s cluster"),(0,a.kt)("h3",{id:"ubuntu"},"Ubuntu"),(0,a.kt)("p",null,"In this example, we will use microk8s. There are many others you can use, including Docker Desktop + K8s, Minikube, k3s, Kind, etc. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://microk8s.io/docs/getting-started"},"https://microk8s.io/docs/getting-started")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo snap install microk8s --classic\n# Add user to group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\n")),(0,a.kt)("h4",{id:"enable-add-ons"},"Enable add ons"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"microk8s enable dns hostpath-storage\n")),(0,a.kt)("h3",{id:"windows"},"Windows"),(0,a.kt)("p",null,"Follow Docker Desktop installation instructions: \u200b ",(0,a.kt)("a",{parentName:"p",href:"https://www.docker.com/products/docker-desktop/"},"https://www.docker.com/products/docker-desktop/"),"\nI recommend using the WSL2 backend. Instructions are here: \u200b",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/desktop/windows/wsl/"},"https://docs.docker.com/desktop/windows/wsl/")," "),(0,a.kt)("p",null,"Once Docker Desktop is installed, k8s is as easy as clicking a button"),(0,a.kt)("p",null,"Add an Alias"),(0,a.kt)("p",null,"You may also want to create an alias so you don\u2019t have to type microk8s kubectl every time. A common way would be do "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"vim ~/.bash_aliases\n")),(0,a.kt)("p",null,"Add this line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'alias k="microk8s kubectl"\nalias helm="microk8s helm"\n')),(0,a.kt)("p",null,"Reload the shell, and then you can run commands like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"k get pods\n")),(0,a.kt)("p",null,"The rest of the guide assumes an alias. If you didn\u2019t add one, use the kubectl , microk8s kubectl, minikube kubectl, etc."),(0,a.kt)("p",null,"Install Helm Chart"),(0,a.kt)("p",null,"Add the Topl Helm repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm repo add topl https://topl.github.io/helm-charts\nhelm repo update\n")),(0,a.kt)("p",null,"Install the Bifrost helm chart"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm upgrade --install bifrost topl/bifrost -n bifrost --create-namespace\n")),(0,a.kt)("p",null,"You can pass values to the chart either by passing a values.yaml file, or individual values via the --set flag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm upgrade --install bifrost topl/bifrost -n bifrost --create-namespace -f ./path/to/values.yaml\nhelm upgrade --install bifrost topl/bifrost --set volume.mountDirectory='/mnt/bifrost' -n bifrost --create-namespace\n")),(0,a.kt)("p",null,"Finally, check the pod to make sure it is running."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"k get pods -n bifrost\n\n# To get more detailed info if the pod did not start, run\nk describe pods -n bifrost\n")),(0,a.kt)("p",null,"You can view the logs by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"k logs statefulset/bifrost -n bifrost\n\n# Or individual pods:\nk logs bifrost-0 -n bifrost\n")))}p.isMDXComponent=!0}}]);