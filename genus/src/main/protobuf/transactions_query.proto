syntax = "proto3";

import "filters.proto";
import "types.proto";
import "services_types.proto";

package co.topl.genus.services;

service TransactionsQuery {
  rpc Query (QueryTxsReq) returns (QueryTxsRes);

  rpc QueryStreamed (TxsQueryStreamReq) returns (stream TxsQueryStreamRes);
}

message TransactionSorting {
  message Height {
    bool descending = 1;
  }

  message Fee {
    bool descending = 1;
  }

  message Timestamp {
    bool descending = 1;
  }

  oneof sort_by {
    Height height = 1;
    Fee fee = 2;
    Timestamp timestamp = 3;
  }
}

message QueryTxsReq {
  TransactionFilter filter = 1;
  TransactionSorting sorting = 2;
  uint32 confirmation_depth = 3;
  Paging paging_options = 4;
}

message QueryTxsRes {
  message Success {
    repeated Transaction transactions = 1;
  }

  message Failure {
    oneof reason {
      string data_store_connection_error = 1;
      string query_timeout = 2;
      string invalid_query = 3;
    }
  }

  oneof result {
    Success success = 1;
    Failure failure = 2;
  }
}

message TxsQueryStreamReq {
  TransactionFilter filter = 1;
  TransactionSorting sorting = 4;
  uint32 confirmation_depth = 2;
}

message TxsQueryStreamRes {
  message Failure {
    oneof reason {
      string data_store_connection_error = 1;
      string invalid_query = 2;
    }
  }

  oneof result {
    Transaction tx = 1;
    Failure failure = 2;
  }
}
