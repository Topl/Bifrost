import 'package:bifrost_common/models/common.dart';
import 'package:bifrost_consensus/interpreters/leader_election_validation.dart';
import 'package:bifrost_consensus/models/vrf_config.dart';
import 'package:convert/convert.dart';
import 'package:fixnum/fixnum.dart';
import 'package:rational/rational.dart';
import 'package:test/test.dart';

void main() {
  group("LeaderElectionValidation", () {
    test("getThreshold", () async {
      final relativeStake = Rational.fromInt(1);
      final slotDiff = Int64(15);
      final config = VrfConfig(
        lddCutoff: 15,
        precision: 40,
        baselineDifficulty: Rational.fromInt(1, 20),
        amplitude: Rational.fromInt(1, 2),
      );
      final leaderElectionValidation = LeaderElectionValidation(config);
      final threshold =
          await leaderElectionValidation.getThreshold(relativeStake, slotDiff);
      final expectedThreshold = Rational(
          BigInt.parse(
              "4596510954904429314044971365671165881246154282071204626093199619880682413035503034380294233533720231256402230121320641158199093762298376166630079399467496251927731158334691949821078817978066106491460294677618604492324430117161403833651396042426470395731302310211750771955289741156429043371967354369255257354794673361626259688089589164347386114676409330272866201527099901278829239520621492941498757094935112277544847323649543069355132465862177930797730513661769937669243921143005673881713211799153265714769603244342416084667917092557164171064192774114853824586002978937441152518449190812393156463404672338582751181429375766119335724696836093676246098090224359888656782736644868219993542186294881460488638745685812405189890675491279549438940761365291059011676493323732411111449416507752106465000704323164757590783194549029302868813099986124742768155232267815939235443127267200775108026321037653874790730653769539480606948725908121638212542104797605038512107893030770835833289404289234402663009688499950804611123186323215673776861564238118968447908769158432864785101375019545470702391008923767670148186215066915888244332056352494530658339808331680907005382444093604820997616149235001729689509866406840958631319185606874329600414806165977757858928113426873043944972401841178608307452585058578053579930828928092153971568356695949935651170982782606100946514820108023749068838476436966690951919204474659096096276210388507403780277059771028641406588823590008066792325025951763392318550480380698842695779061027625757902009255156945111053995493685325019800420170997608972174471388890862440914487182268760075791835117426682708510336830405800687344318413847090820484038521936766825444080211951082340065147390578084115417519260978593936853252479"),
          BigInt.parse(
              "9193021909808858665915706985400750972539363314449630800812278337458506644642742314002325358332986961855565319432168750831433495923601904359307780158758664307800295194498690411375854946080680768380901564641839906869384830074168272858218797458962844321215170218109213393644297563436772303433457343352512304563864535359913756619539375682870396021583394092584558506313632881937029128537242208166199396816292442018174388925543567767762899735791595501661852361868642732173815195532794352849497856885984590940804943905211591620605270066248741362695678113367717993572022446380209170458521972056378078408879003365615805661482745532907040704112168718750096307041158744617179679915269784109594992171120994045886646395451673682708379427397045967689928879830212131732223784379413311198549105660189698881717198083814192373766308837257283540372566418156770933251879486586241599034926444224688096848310278553600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
      expect(threshold, expectedThreshold);

      final rho = hex.decode(
          "ed1f67d7419ef6176494dadc4ff9f39349c7088f88b66e7719400dc96fa10d989e4a9c9335b30732cf19389e8a584e6d4f54d1c2e33b2e62ae3495734121a4da");
      final isSlotLeader = await leaderElectionValidation
          .isSlotLeaderForThreshold(threshold, rho);
      expect(isSlotLeader, true);
    });
  });
}
